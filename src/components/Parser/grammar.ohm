Moniel {
    StartHere
        = Program

    Program
        = Assignment*

    Assignment
        = "_"? "$"? Path ":" Value ("\n"|",")? -- normal
        | "::" Path ("\n"|","|";")? -- import
        
    Function
        = (identifier) "=>" Expression

    Value
        = Expression
        
    Expression (an expression)
        = Addition
    Addition
        = (Addition ("+"|"-") Multiplication) -- binary
        | Multiplication -- fallthrough
        | "-" Multiplication -- negative
    Multiplication
        = (Multiplication ("*"|"×"|"/"|"÷"|"%"|"@"|"⊗") Exponentiation) -- binary
        | Exponentiation -- fallthrough
        | "/" Multiplication  -- reciprocal
    Exponentiation
        = Access "^" Exponentiation  -- binary
        | Access -- fallthrough
    Access
        = Access "." Path -- binary
        | Pipeline -- fallthrough
        
    Pipeline
    	= Pipeline "->" (~Assignment FunctionApplication) -- binary
        | FunctionApplication -- fallthrough
        
    FunctionApplication
        = PrimitiveExpression (~Assignment FunctionApplication)?
    
    PrimitiveExpression
        = "(" Value ")"  -- paren
        | "'" PrimitiveExpression  -- magic
        | Function
        | Object
        | Reference -- path
        | Tensor  -- tensor
        
    Reference
        = Path
    Path
        = nonemptyListOf<identifier, ".">

    Object (object)
        = "{" Program "}"

    Scalar
        = number
    Vector (vector)
        = "[" row "]"
    Matrix (matrix)
        = "[" rows "]"
    Tensor
        = (Scalar | Vector | Matrix)

    rows
        = nonemptyListOf<row, rowSeparator>
    row
        = spaceButNewLine* nonemptyListOf<number, spaceButNewLine*> spaceButNewLine*
    rowSeparator
        = ("\n" | ",")
    spaceButNewLine
        = ~"\n" space
    number (a number)
        = "-"? (digit|"_")+ ("." (digit|"_")*)?

    identifier (an identifier)
        = &letter (alnum | "_" | "-")+

    // TODO: Comment that will comment out the rest of the program.
    space
        += lineComment
    lineComment
        = ((";"|"|") (~"\n" any)*) "\n"?
}